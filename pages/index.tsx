/**
 * Copyright 2025 Wingify Software Pvt. Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import React, { useState, useEffect } from 'react';
import type { NextPage, GetServerSideProps } from 'next';
import { useRouter } from 'next/router';
import styles from '../styles/Home.module.css';
import Modal from '../components/Modal';
import SearchForm from '../components/SearchForm';
import ResponseDisplay from '../components/ResponseDisplay';
import { evaluateFlag, getLogs } from '../lib/vwo-server';
import type { HomePageProps, VWOData, VWOLog, CampaignInfo } from '../types';

const Home: NextPage<HomePageProps> = ({ initialUserId, vwoData, error }) => {
  const router = useRouter();
  const [modalOpen, setModalOpen] = useState(false);
  const [modalContent, setModalContent] = useState<React.ReactNode>('');
  const [modalTitle, setModalTitle] = useState('');
  const [modalHeader, setModalHeader] = useState<React.ReactNode>(null);
  const [viewRawSettings, setViewRawSettings] = useState(false);
  const [loading, setLoading] = useState(false);

  // Handle form submission
  const handleFormSubmit = async (userId: string, action: 'evaluate') => {
    setLoading(true);
    const url = `/?userId=${encodeURIComponent(userId)}`;
    await router.push(url);
    setLoading(false);
  };

  // Generate response HTML
  const generateResponseHtml = (data: VWOData): string => {
    return `
      <div class="${styles.resultFooter}">
        Response generated by <i><strong>${data.modelName}</strong></i>
        <span style="float: right;">
          Feature: <span style="color: ${data.isEnabled ? '#4CAF50' : '#FF6B6B'};">
            <strong>${data.isEnabled ? 'Enabled' : 'Disabled'}</strong>
          </span> for user: <i>${data.userId}</i>
        </span>
      </div>
      <div class="${styles.responseWrapper}"><pre>${data.content}</pre></div>
    `;
  };

  // Render settings content
  const renderSettingsContent = () => {
    if (!vwoData?.settings) return null;

    if (!viewRawSettings) {
      const simplifiedData: CampaignInfo[] = vwoData.settings.campaigns?.map((campaign: any) => ({
        name: campaign.name,
        status: campaign.status,
        variationsCount: campaign.variations.length,
        variations: campaign.variations.map((variation: any) => ({
          name: variation.name,
          weight: variation.weight,
          variables: variation.variables.map((variable: any) => ({
            key: variable.key,
            value: variable.value,
            isDefault: variation.name.toLowerCase().includes('default'),
          })),
        })),
      })) || [];

      return (
        <div>
          {simplifiedData.map((test, i) => (
            <div key={i} className={styles.testContainer}>
              <h3>
                {test.name} (<span className={test.status === 'RUNNING' ? styles.statusRunning : ''}>{test.status}</span>, Variations: {test.variationsCount})
              </h3>
              {test.variations.map((variation, j) => (
                <div key={j} className={styles.variation}>
                  <strong>Variation: {variation.name} (Weight: {variation.weight}%)</strong>
                  <ul>
                    {variation.variables.map((variable, k) => (
                      <li key={k}>
                        <strong>Variable:</strong> {variable.key} - {JSON.stringify(variable.value)} {variable.isDefault ? ' (Default)' : ''}
                      </li>
                    ))}
                  </ul>
                </div>
              ))}
            </div>
          ))}
        </div>
      );
    } else {
      const prettyJson = JSON.stringify(vwoData.settings, null, 4)
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/"([^"]+)":/g, '<span class="json-key">"$1":</span>')
        .replace(/"([^"]+)"(?=,|\n|\s*\}|\s*\])/g, '<span class="json-string">"$1"</span>')
        .replace(/\b(true|false)\b/g, '<span class="json-boolean">$1</span>')
        .replace(/\b(\d+)\b/g, '<span class="json-number">$1</span>');

      return (
        <div style={{ position: 'relative' }}>
          <button
            className={styles.copyBtn}
            onClick={() => {
              navigator.clipboard.writeText(JSON.stringify(vwoData.settings, null, 2)).then(() => {
                alert('Copied to clipboard!');
              });
            }}
          >
            ðŸ“‹ Copy
          </button>
          <pre
            className={styles.modalContent}
            dangerouslySetInnerHTML={{ __html: prettyJson }}
          />
        </div>
      );
    }
  };

  // Render logs content
  const renderLogsContent = () => {
    const logs = vwoData?.logs || [];
    
    return (
      <div className={styles.modalContent}>
        <div style={{ whiteSpace: 'pre-wrap', maxHeight: 400, overflowY: 'auto' }}>
          {logs.map((log, index) => (
            <div key={index} style={{ marginBottom: '8px', padding: '4px' }}>
              <span className={`${styles[`logLevel${log.level.charAt(0).toUpperCase() + log.level.slice(1)}`]}`}>
                [{log.level.toUpperCase()}]
              </span>{' '}
              {log.timestamp} {log.message}
            </div>
          ))}
        </div>
      </div>
    );
  };

  // Effect to update modal content when viewRawSettings changes
  useEffect(() => {
    if (modalOpen && modalTitle === 'VWO Flags Settings' && vwoData?.settings) {
      setModalContent(renderSettingsContent());
      setModalHeader(
        <div className={styles.toggleSwitch}>
          <input
            type="checkbox"
            id="toggleSwitch"
            checked={viewRawSettings}
            onChange={() => setViewRawSettings((v) => !v)}
          />
          <label htmlFor="toggleSwitch" style={{ cursor: 'pointer', marginLeft: 8 }}>
            View Raw Settings
          </label>
        </div>
      );
    }
  }, [viewRawSettings, modalOpen, modalTitle, vwoData?.settings, styles.toggleSwitch]);

  // Open modal handler
  const openModal = (modalId: string) => {
    setViewRawSettings(false);
    if (modalId === 'settings' && vwoData?.settings) {
      setModalTitle('VWO Flags Settings');
      setModalHeader(
        <div className={styles.toggleSwitch}>
          <input
            type="checkbox"
            id="toggleSwitch"
            checked={viewRawSettings}
            onChange={() => setViewRawSettings((v) => !v)}
          />
          <label htmlFor="toggleSwitch" style={{ cursor: 'pointer', marginLeft: 8 }}>
            View Raw Settings
          </label>
        </div>
      );
      setModalContent(renderSettingsContent());
      setModalOpen(true);
    } else if (modalId === 'logs' && vwoData?.logs) {
      setModalTitle('VWO SDK Logs');
      setModalHeader(null);
      setModalContent(renderLogsContent());
      setModalOpen(true);
    } else {
      setModalTitle('Error');
      setModalHeader(null);
      setModalContent('No data available. Please evaluate a flag first.');
      setModalOpen(true);
    }
  };

  return (
    <div 
      className={styles.container} 
      style={{ '--response-bg': vwoData?.backgroundColor || '#fff' } as React.CSSProperties}
    >
      <h1 className={styles.title}>Smart Bot</h1>
      
      {error && (
        <div style={{ color: 'red', marginBottom: '20px', padding: '10px', border: '1px solid red', borderRadius: '5px' }}>
          Error: {error}
        </div>
      )}
      
      <SearchForm
        initialUserId={initialUserId}
        inputQuery="How do I reset my password?"
        loading={loading}
        error={error}
        onSubmit={handleFormSubmit}
      />

      {vwoData && (
        <ResponseDisplay
          responseHtml={generateResponseHtml(vwoData)}
          onShowSettings={() => openModal('settings')}
          onShowLogs={() => openModal('logs')}
        />
      )}

      <Modal
        isOpen={modalOpen}
        onClose={() => setModalOpen(false)}
        title={modalTitle}
        header={modalHeader}
      >
        {modalContent}
      </Modal>
    </div>
  );
};

// Server-side rendering with getServerSideProps
export const getServerSideProps: GetServerSideProps<HomePageProps> = async (context) => {
  const { query } = context;
  const userId = query.userId as string;

  // If no userId is provided, just return empty props
  if (!userId) {
    return {
      props: {}
    };
  }

  try {
    // Evaluate VWO flag on the server
    const result = await evaluateFlag(userId);
    
    if (!result.success) {
      return {
        props: {
          initialUserId: userId,
          error: result.error || 'Failed to evaluate flag'
        }
      };
    }

    return {
      props: {
        initialUserId: userId,
        vwoData: result.data!
      }
    };
  } catch (error: any) {
    console.error('SSR error:', error);
    return {
      props: {
        initialUserId: userId,
        error: 'Server error occurred while processing request'
      }
    };
  }
};

export default Home; 